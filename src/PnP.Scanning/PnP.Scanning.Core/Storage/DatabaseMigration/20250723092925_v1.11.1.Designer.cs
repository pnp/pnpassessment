// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PnP.Scanning.Core.Storage;

#nullable disable

namespace PnP.Scanning.Core.Storage.DatabaseMigration
{
    [DbContext(typeof(ScanContext))]
    [Migration("20250723092925_v1.11.1")]
    partial class v1111
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("PnP.Scanning.Core.Storage.Alerts", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlertId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlertFrequency")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlertTemplateName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AlertTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlertTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlertType")
                        .HasColumnType("TEXT");

                    b.Property<string>("CAMLQuery")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryChannel")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ListItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ListTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserLoginName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPrincipalType")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "AlertId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "AlertId")
                        .IsUnique();

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.Cache", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "Key");

                    b.HasIndex("ScanId", "Key")
                        .IsUnique();

                    b.ToTable("Cache");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicACSPrincipal", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowAppOnly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppDomains")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasExpired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSiteCollectionScopedPermissions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasTenantScopedPermissions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RedirectUri")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "AppIdentifier");

                    b.HasIndex("ScanId", "AppIdentifier")
                        .IsUnique();

                    b.ToTable("ClassicACSPrincipals");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicACSPrincipalSite", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerRelativeUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "AppIdentifier", "ServerRelativeUrl");

                    b.HasIndex("ScanId", "AppIdentifier", "ServerRelativeUrl")
                        .IsUnique();

                    b.ToTable("classicACSPrincipalSites");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicACSPrincipalSiteScopedPermissions", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerRelativeUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WebId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Right")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "AppIdentifier", "ServerRelativeUrl", "SiteId", "WebId", "ListId", "Right");

                    b.HasIndex("ScanId", "AppIdentifier", "ServerRelativeUrl", "SiteId", "WebId", "ListId", "Right")
                        .IsUnique();

                    b.ToTable("ClassicACSPrincipalSiteScopedPermissions");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicACSPrincipalTenantScopedPermissions", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductFeature")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .HasColumnType("TEXT");

                    b.Property<string>("Right")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "AppIdentifier", "ProductFeature", "Scope", "Right", "ResourceId");

                    b.HasIndex("ScanId", "AppIdentifier", "ProductFeature", "Scope", "Right", "ResourceId")
                        .IsUnique();

                    b.ToTable("ClassicACSPrincipalTenantScopedPermissions");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicAddIn", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppInstanceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppWebFullUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppWebId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrentSiteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentWebFullUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrentWebId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentWebName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasExpired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstalledBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstalledSiteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstalledWebFullUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstalledWebId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstalledWebName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LaunchUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LicensePurchaseTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Locale")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaserIdentity")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantAppData")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TenantAppDataUpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "AppInstanceId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "AppInstanceId")
                        .IsUnique();

                    b.ToTable("ClassicAddIns");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicExtensibility", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlternateCSS")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomMasterPage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasSharePointAddIns")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MasterPage")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UsesCustomCSS")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsesCustomMasterPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsesCustomTheme")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsesUserCustomAction")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl")
                        .IsUnique();

                    b.ToTable("ClassicExtensibilities");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicInfoPath", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InfoPathTemplate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InfoPathUsage")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastItemUserModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "ListId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "ListId")
                        .IsUnique();

                    b.ToTable("ClassicInfoPath");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicList", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ClassicByDesign")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultViewRenderType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListExperience")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListTemplate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListTemplateType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "ListId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "ListId")
                        .IsUnique();

                    b.ToTable("ClassicLists");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicPage", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageType")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "PageUrl");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "PageUrl")
                        .IsUnique();

                    b.ToTable("ClassicPages");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicSiteSummary", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("AggregatedRemediationCodes")
                        .HasColumnType("TEXT");

                    b.Property<int>("AzureACSPrincipals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicASPXPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicBlogPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicExtensibilities")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicInfoPathForms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicLists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicPublishingPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicWebPartPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicWikiPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicWorkflows")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastItemUserModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModernLists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModernPages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RootWebTemplate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SharePointAddIns")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubWebCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubWebDepth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubWebTemplates")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl");

                    b.HasIndex("ScanId", "SiteUrl")
                        .IsUnique();

                    b.ToTable("ClassicSiteSummaries");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicUserCustomAction", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandAction")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandUIExtension")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Problem")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptBlock")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptSrc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "Id");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "Id")
                        .IsUnique();

                    b.ToTable("ClassicUserCustomActions");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicWebPart", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebPartId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasProperMapping")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebPartAssembly")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebPartClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebPartProperties")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebPartTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebPartType")
                        .HasColumnType("TEXT");

                    b.Property<int>("WebPartZone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WebPartZoneIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "PageUrl", "WebPartId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "PageUrl", "WebPartId")
                        .IsUnique();

                    b.ToTable("ClassicWebParts");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.ClassicWebSummary", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("AggregatedRemediationCodes")
                        .HasColumnType("TEXT");

                    b.Property<int>("AzureACSPrincipals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicASPXPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicBlogPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicExtensibilities")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicInfoPathForms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicLists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicPublishingPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicWebPartPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicWikiPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassicWorkflows")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasAzureACSPrincipal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasClassicExtensibility")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasClassicInfoPathForms")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasClassicWorkflow")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSharePointAddIns")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsClassicPublishingSite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsModernCommunicationSite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsModernSite")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastItemUserModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModernLists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModernPages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("SharePointAddIns")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Template")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl")
                        .IsUnique();

                    b.ToTable("ClassicWebSummaries");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Event")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScanId", "Event", "EventDate")
                        .IsUnique();

                    b.ToTable("History");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.Property", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "Name");

                    b.HasIndex("ScanId", "Name")
                        .IsUnique();

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.Scan", b =>
                {
                    b.Property<Guid>("ScanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CLIApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CLIAuthMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("CLICertFile")
                        .HasColumnType("TEXT");

                    b.Property<string>("CLICertFilePassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("CLICertPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("CLIEnvironment")
                        .HasColumnType("TEXT");

                    b.Property<string>("CLIMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("CLISiteFile")
                        .HasColumnType("TEXT");

                    b.Property<string>("CLISiteList")
                        .HasColumnType("TEXT");

                    b.Property<string>("CLITenant")
                        .HasColumnType("TEXT");

                    b.Property<string>("CLITenantId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CLIThreads")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostScanStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreScanStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId");

                    b.ToTable("Scans");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.SiteCollection", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Error")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScanDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StackTrace")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScanId", "SiteUrl");

                    b.HasIndex("ScanId", "SiteUrl")
                        .IsUnique();

                    b.ToTable("SiteCollections");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.SyntexContentType", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentTemplate")
                        .HasColumnType("TEXT");

                    b.Property<int>("FieldCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Group")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ListContentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "ListId", "ContentTypeId");

                    b.HasIndex("ScanId", "ContentTypeId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "ListId", "ContentTypeId")
                        .IsUnique();

                    b.ToTable("SyntexContentTypes");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.SyntexContentTypeField", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InternalName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TermSetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeAsString")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "ListId", "ContentTypeId", "FieldId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "ListId", "ContentTypeId", "FieldId")
                        .IsUnique();

                    b.ToTable("SyntexContentTypeFields");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.SyntexContentTypeSummary", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentTemplate")
                        .HasColumnType("TEXT");

                    b.Property<int>("FieldCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Group")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSyntexContentType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ItemCountLowerQuartile")
                        .HasColumnType("REAL");

                    b.Property<double>("ItemCountMax")
                        .HasColumnType("REAL");

                    b.Property<double>("ItemCountMean")
                        .HasColumnType("REAL");

                    b.Property<double>("ItemCountMedian")
                        .HasColumnType("REAL");

                    b.Property<double>("ItemCountMin")
                        .HasColumnType("REAL");

                    b.Property<double>("ItemCountStandardDeviation")
                        .HasColumnType("REAL");

                    b.Property<double>("ItemCountUpperQuartile")
                        .HasColumnType("REAL");

                    b.Property<int>("ListCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SyntexModelDriveId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SyntexModelObjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "ContentTypeId");

                    b.HasIndex("ScanId", "ContentTypeId")
                        .IsUnique();

                    b.ToTable("SyntexContentTypeOverview");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.SyntexField", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InternalName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TermSetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeAsString")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "ListId", "FieldId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "ListId", "FieldId")
                        .IsUnique();

                    b.ToTable("SyntexFields");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.SyntexFileType", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "ListId", "FileType");

                    b.HasIndex("ScanId", "FileType");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "ListId", "FileType")
                        .IsUnique();

                    b.ToTable("SyntexFileTypes");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.SyntexList", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowContentTypes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AverageDocumentsPerFolder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContentTypeCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlowInstanceCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("TEXT");

                    b.Property<int>("LastChangedMonth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastChangedMonthString")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastChangedQuarter")
                        .HasColumnType("TEXT");

                    b.Property<int>("LastChangedYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LibrarySize")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListExperienceOptions")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListServerRelativeUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("ListTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ListTemplateString")
                        .HasColumnType("TEXT");

                    b.Property<int>("RetentionLabelCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UsesCustomColumns")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkflowInstanceCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "ListId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "ListId")
                        .IsUnique();

                    b.ToTable("SyntexLists");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.SyntexModelUsage", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Classifier")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TargetSiteId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TargetWebId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TargetListId")
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageConfidenceScore")
                        .HasColumnType("REAL");

                    b.Property<int>("ClassifiedItemCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnterpriseContentCenter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotProcessedItemCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "Classifier", "TargetSiteId", "TargetWebId", "TargetListId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "Classifier", "TargetSiteId", "TargetWebId", "TargetListId");

                    b.ToTable("SyntexModelUsage");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.SyntexTermSet", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TermSetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "TermSetId");

                    b.HasIndex("ScanId", "TermSetId")
                        .IsUnique();

                    b.ToTable("SyntexTermSets");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.TempClassicACSPrincipal", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerRelativeUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowAppOnly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppDomains")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RedirectUri")
                        .HasColumnType("TEXT");

                    b.Property<string>("RemediationCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "AppIdentifier", "ServerRelativeUrl");

                    b.HasIndex("ScanId", "AppIdentifier", "ServerRelativeUrl")
                        .IsUnique();

                    b.ToTable("TempClassicACSPrincipals");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.TempClassicACSPrincipalValidUntil", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "AppIdentifier");

                    b.HasIndex("ScanId", "AppIdentifier")
                        .IsUnique();

                    b.ToTable("TempClassicACSPrincipalValidUntils");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.TestDelay", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Delay1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Delay2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Delay3")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WebIdString")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl")
                        .IsUnique();

                    b.ToTable("TestDelays");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.Web", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Error")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScanDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StackTrace")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Template")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrlAbsolute")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl")
                        .IsUnique();

                    b.ToTable("Webs");
                });

            modelBuilder.Entity("PnP.Scanning.Core.Storage.Workflow", b =>
                {
                    b.Property<Guid>("ScanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DefinitionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ActionCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CancelledInstances")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CancellingInstances")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompletedInstances")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentTypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefinitionDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefinitionName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSubscriptions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOOBWorkflow")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastDefinitionEdit")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSubscriptionEdit")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotStartedInstances")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RestrictToType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .HasColumnType("TEXT");

                    b.Property<int>("StartedInstances")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("TEXT");

                    b.Property<int>("SuspendedInstances")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TerminatedInstances")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalInstances")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnsupportedActionCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnsupportedActionsInFlow")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsedActions")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsedTriggers")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId", "SiteUrl", "WebUrl", "DefinitionId", "SubscriptionId");

                    b.HasIndex("ScanId", "SiteUrl", "WebUrl", "DefinitionId", "SubscriptionId")
                        .IsUnique();

                    b.ToTable("Workflows");
                });
#pragma warning restore 612, 618
        }
    }
}
